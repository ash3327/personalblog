"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1694],{3439:e=>{e.exports=JSON.parse('{"permalink":"/personalblog/blog/gan-generation","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-06-01-gan-generation.md","source":"@site/blog/2023-06-01-gan-generation.md","title":"Project: GAN Generation","description":"WGAN implementation on MNIST dataset","date":"2023-06-01T00:00:00.000Z","tags":[{"inline":true,"label":"Project","permalink":"/personalblog/blog/tags/project"},{"inline":true,"label":"PyTorch","permalink":"/personalblog/blog/tags/py-torch"},{"inline":true,"label":"GAN","permalink":"/personalblog/blog/tags/gan"},{"inline":true,"label":"Deep Learning","permalink":"/personalblog/blog/tags/deep-learning"},{"inline":true,"label":"Generative Models","permalink":"/personalblog/blog/tags/generative-models"}],"readingTime":1.135,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Project: GAN Generation","description":"WGAN implementation on MNIST dataset","slug":"gan-generation","tags":["Project","PyTorch","GAN","Deep Learning","Generative Models"],"image":"/personalblog/img/docs/gan/v5.gif"},"unlisted":false,"prevItem":{"title":"Project: YOLO Object Tracking","permalink":"/personalblog/blog/yolo-object-tracking"},"nextItem":{"title":"Project: Deep Q-Learning Agent","permalink":"/personalblog/blog/deep-q-learning-agent"}}')},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},9049:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>h});var i=s(3439),t=s(4848),r=s(8453);const l={title:"Project: GAN Generation",description:"WGAN implementation on MNIST dataset",slug:"gan-generation",tags:["Project","PyTorch","GAN","Deep Learning","Generative Models"],image:"/personalblog/img/docs/gan/v5.gif"},o="GAN Self-Learning Project",a={authorsImageUrls:[]},h=[{value:"Backup of GAN Learning Project (August 2022)",id:"backup-of-gan-learning-project-august-2022",level:2},{value:"References",id:"references",level:2},{value:"Setups",id:"setups",level:2},{value:"Experiments",id:"experiments",level:2},{value:"MNIST Digit Generation",id:"mnist-digit-generation",level:3},{value:"Key Experiments",id:"key-experiments",level:3},{value:"Experiment Results",id:"experiment-results",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/ash3327/GAN-self-learn-v1",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/View_Project-GAN%20Generation-4285F4?style=flat&logo=github&logoColor=white",alt:"View Project"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.python.org/",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Python-3776AB.svg?logo=python&logoColor=white",alt:"Python"})}),"\r\n",(0,t.jsx)(n.a,{href:"https://pytorch.org/",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/PyTorch-EE4C2C.svg?logo=pytorch&logoColor=white",alt:"PyTorch"})}),"\r\n",(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/GAN-Generative%20Adversarial%20Networks-blueviolet.svg",alt:"Generative Adversarial Networks"}),"\r\n",(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Dataset-MNIST-blue.svg",alt:"MNIST Dataset"}),"\r\n",(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Last%20Updated-August%202022-green.svg",alt:"Last Updated: August 2022"})]}),"\n",(0,t.jsx)(n.h2,{id:"backup-of-gan-learning-project-august-2022",children:"Backup of GAN Learning Project (August 2022)"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"[!NOTE]\r\nThe project explores various GAN architectures and improvements through iterative versions."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"[!IMPORTANT]\r\nThis project is a personal learning exercise in understanding and implementing different GAN techniques."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['The YouTube video series "Generative Adversarial Networks (GANs)", Aladdin Persson, at ',(0,t.jsx)(n.a,{href:"https://www.youtube.com/playlist?list=PLhhyoLH6IjfwIp8bZnzX8QR30TRcHO8Va",children:"https://www.youtube.com/playlist?list=PLhhyoLH6IjfwIp8bZnzX8QR30TRcHO8Va"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setups",children:"Setups"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Environment"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Python version: 3.x"}),"\n",(0,t.jsx)(n.li,{children:"Framework: PyTorch"}),"\n",(0,t.jsx)(n.li,{children:"Dataset: MNIST"}),"\n",(0,t.jsx)(n.li,{children:"Runned on Google Colab"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"experiments",children:"Experiments"}),"\n",(0,t.jsx)(n.h3,{id:"mnist-digit-generation",children:"MNIST Digit Generation"}),"\n",(0,t.jsx)(n.p,{children:"Explored various GAN architectures:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Standard GAN"}),"\n",(0,t.jsx)(n.li,{children:"Wasserstein GAN (WGAN)"}),"\n",(0,t.jsx)(n.li,{children:"Conditional WGAN"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-experiments",children:"Key Experiments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Experimented with different learning rates"}),"\n",(0,t.jsx)(n.li,{children:"Observed the phoenomenon of mode collapse and the sensitivity of the GAN architecture to the learning rate"}),"\n",(0,t.jsx)(n.li,{children:"Understanding the architecture of GAN, improvements made by WGAN, and also the principles of providing class conditions to GANs"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"experiment-results",children:"Experiment Results"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Vanilla GAN\r\n",(0,t.jsx)(n.a,{href:"https://github.com/ash3327/GAN-self-learn-v1/blob/main/202208011748_GAN_mnist_v2%20good/202208011748_GAN_mnist_v2_final.ipynb",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Version-v2-blue.svg",alt:"Version v2"})}),"\r\n",(0,t.jsx)(n.a,{href:"https://github.com/ash3327/GAN-self-learn-v1/blob/main/202208021155_GAN_mnist_v3%20good%2Cinterupted/202208021155_GAN_mnist_v3.ipynb",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Version-v3-blue.svg",alt:"Version v3"})}),"\r\n",(0,t.jsx)(n.a,{href:"https://github.com/ash3327/GAN-self-learn-v1/blob/main/202208041411_GAN_mnist_v4%20faster%20GAN/202208031401_GAN_mnist_v4_epoch100_ed.ipynb",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Version-v4-blue.svg",alt:"Version v4"})})]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"v2 (100 epochs)"}),(0,t.jsx)("th",{children:"v3 (35 epochs *early stopped)"}),(0,t.jsx)("th",{children:"v4 (100 epochs)"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("img",{src:"/personalblog/img/docs/gan/v2.png",width:"200",height:"200"})}),(0,t.jsx)("td",{children:(0,t.jsx)("img",{src:"/personalblog/img/docs/gan/v3.png",width:"200",height:"200"})}),(0,t.jsx)("td",{children:(0,t.jsx)("img",{src:"/personalblog/img/docs/gan/v4.gif",width:"200",height:"200"})})]})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Wasserstein GAN (WGAN)\r\n",(0,t.jsx)(n.a,{href:"https://github.com/ash3327/GAN-self-learn-v1/blob/main/202208051901_GAN_mnist_v5_WGAN/202208051901_GAN_mnist_v5_WGAN%20epoch100.ipynb",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Version-v5-blue.svg",alt:"Version v5"})})]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("tr",{children:(0,t.jsx)("th",{children:"v5 (100 epochs)"})}),(0,t.jsx)("tr",{children:(0,t.jsx)("td",{children:(0,t.jsx)("img",{src:"/personalblog/img/docs/gan/v5.gif",width:"200",height:"200"})})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Conditional Wasserstein GAN (incomplete)\r\n",(0,t.jsx)(n.a,{href:"https://github.com/ash3327/GAN-self-learn-v1/blob/main/202208061306_GAN_mnist_v6_conditional%20WGAN/202208061306_GAN_mnist_v6_Conditional_WGAN.ipynb",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Version-v6-blue.svg",alt:"Version v6"})})]}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);